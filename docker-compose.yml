version: '3.8'

services:
  # TAB Application
  tab-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - TAB_CONFIG_PATH=/app/config
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - TAB_LOG_LEVEL=INFO
      - TAB_ENVIRONMENT=development
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For agent container management
    depends_on:
      - otel-collector
      - jaeger
    networks:
      - tab-network
    restart: unless-stopped
    user: "1000:1000"  # Rootless execution
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/tmp:noexec,nosuid,size=100m

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - tab-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # Jaeger gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - tab-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tab-network
    restart: unless-stopped

  # Grafana for observability dashboards
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - tab-network
    restart: unless-stopped

  # Agent execution sandbox (template)
  tab-agent-sandbox:
    build:
      context: .
      dockerfile: Dockerfile.agent-sandbox
    profiles:
      - agent-execution
    environment:
      - TAB_AGENT_MODE=sandbox
    volumes:
      - agent-workspace:/workspace:rw
    networks:
      - tab-agent-network
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"
    restart: "no"

networks:
  tab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  tab-agent-network:
    driver: bridge
    internal: true  # No external network access for agents
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  agent-workspace:
    driver: local